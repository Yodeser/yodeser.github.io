<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Your Codes</title>
  <icon>https://www.gravatar.com/avatar/5a1b3d1c380bd32fef9fbbe9db271152</icon>
  <subtitle>Follow your Heart, Fly your Foot</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yodes.cn/"/>
  <updated>2018-10-20T13:07:11.334Z</updated>
  <id>http://blog.yodes.cn/</id>
  
  <author>
    <name>Yodes Yang</name>
    <email>yodeser@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TF-idf 思想及其Java 实现</title>
    <link href="http://blog.yodes.cn/post/631f.html"/>
    <id>http://blog.yodes.cn/post/631f.html</id>
    <published>2018-03-30T02:48:59.000Z</published>
    <updated>2018-10-20T13:07:11.334Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/18-3-30/48412646.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><p>&emsp;&emsp;信息时代，大数据成为一切操作的基石，即使是人工智能及深度学习相关领域也离不开数据的支撑。因此文本挖掘、图像处理等基础技术愈加重要，本文将着重介绍文本挖掘中的加权算法——TF-idf及其Java实现。</p><a id="more"></a><h1 id="概况简介"><a href="#概况简介" class="headerlink" title="概况简介"></a>概况简介</h1><p>&emsp;&emsp;TF-idf常被作为一种统计算法对分词结果进行加权排序，以得出文本中重要的一些词汇，因此可以视作分类算法或评级算法。显然从其名字我们可以轻松地知道，该算法由两部分组成，TF及idf。<br>&emsp;&emsp;TF（Term Frequency，词频）指的是在一段文本中，某一词汇出现的频率。idf（inverse document frequency，逆文本频率）指的是许多文件中某一词汇的重要程度。你可以前往<a href="https://zh.wikipedia.org/wiki/Tf-idf" target="_blank" rel="noopener">维基中国</a>查看更多详细的内容。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>&emsp;&emsp;网上不乏该算法的实现，但均乏善可陈且本人钟情于Java，故开发了Java实现。</p><h2 id="语料分词"><a href="#语料分词" class="headerlink" title="语料分词"></a>语料分词</h2><p>&emsp;&emsp;作者采用优秀的国产开源分词软件HanLP进行分词，对它有兴趣的同学可自行前往其Github主页学习。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotionalTokenizer.segment(corpusText.toString());</span><br></pre></td></tr></table></figure></p><h2 id="TF值求取"><a href="#TF值求取" class="headerlink" title="TF值求取"></a>TF值求取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对单词表进行TF求取</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> wordList 单词表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 词频Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">countTFByWordList</span><span class="params">(List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Integer&gt; tfMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String word : wordList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tfMap.containsKey(word)) &#123;</span><br><span class="line">            tfMap.put(word, tfMap.get(word) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tfMap.put(word, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tfMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对文本进行分词后求取TF值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> textList  文本List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hasNature 词频是否包含词性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 词频Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title">countTFByText</span><span class="params">(List&lt;String&gt; textList, <span class="keyword">boolean</span> hasNature)</span> </span>&#123;</span><br><span class="line">    StringBuilder textBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (String text : textList) &#123;</span><br><span class="line">        textBuilder.append(text).append(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; wordList = NotionalTokenizer.segment(textBuilder.toString())</span><br><span class="line">            .stream()</span><br><span class="line">            <span class="comment">//词性过滤，如不需要过滤词性则不需要此filter</span></span><br><span class="line"><span class="comment">//                .filter(term -&gt; term.nature.startsWith("n")</span></span><br><span class="line"><span class="comment">//                        || term.nature.startsWith("rr")</span></span><br><span class="line"><span class="comment">//                        || term.nature.startsWith("v"))</span></span><br><span class="line">            .map(term -&gt; term.word + ((hasNature) ? <span class="string">"\t"</span> + term.nature : <span class="string">""</span>))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> countTFByWordList(wordList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="idf值求取"><a href="#idf值求取" class="headerlink" title="idf值求取"></a>idf值求取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 计算某一词汇的IDF值</span><br><span class="line"> *</span><br><span class="line"> * @param textList 文本List</span><br><span class="line"> * @param word     词汇</span><br><span class="line"> * @return 该词汇的IDF值（Double类型）</span><br><span class="line"> */</span><br><span class="line">private static Double calculateIDFByWord(List&lt;String&gt; textList, String word) &#123;</span><br><span class="line">    int count = 0;</span><br><span class="line">    for (String text : textList) &#123;</span><br><span class="line">        if (text.contains(word.split(&quot;\\s+&quot;)[0])) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return Math.log10(textList.size() / (double) (count + 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String countIDF(List&lt;String&gt; textList, boolean hasNature) &#123;</span><br><span class="line">    StringBuilder tfResult = new StringBuilder(), tf_idfResult = new StringBuilder(), allResult = new StringBuilder();</span><br><span class="line">    Map&lt;String, Double&gt; idfMap = new HashMap&lt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; tf_idfMap = countTFByText(textList, hasNature);</span><br><span class="line"></span><br><span class="line">    List&lt;Map.Entry&lt;String, Integer&gt;&gt; tfArrayList = new ArrayList&lt;&gt;(tf_idfMap.entrySet());</span><br><span class="line">    tfArrayList.sort(Comparator.comparing(Map.Entry::getValue));</span><br><span class="line">    for (Map.Entry&lt;String, Integer&gt; entry : tfArrayList) &#123;</span><br><span class="line">        idfMap.put(entry.getKey(), entry.getValue() * calculateIDFByWord(textList, entry.getKey()));</span><br><span class="line">        tfResult.append(entry.getKey()).append(&quot;\t&quot;).append(entry.getValue()).append(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Map.Entry&lt;String, Double&gt;&gt; idfArrayList = new ArrayList&lt;&gt;(idfMap.entrySet());</span><br><span class="line">    idfArrayList.sort(Comparator.comparing(Map.Entry::getValue));</span><br><span class="line">    for (Map.Entry&lt;String, Double&gt; entry : idfArrayList) &#123;</span><br><span class="line">        tf_idfResult.append(entry.getKey()).append(&quot;\t&quot;).append(entry.getValue()).append(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    allResult.append(&quot;--------------TF-IDF Result --------------\n&quot;);</span><br><span class="line">    allResult.append(tf_idfResult);</span><br><span class="line">//        allResult.append(&quot;--------------TF Result--------------\n&quot;);</span><br><span class="line">//        allResult.append(tfResult);</span><br><span class="line"></span><br><span class="line">    return allResult.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>&emsp;&emsp;我将使用纳兰性德的190+首诗词作品作为语料来源，并将其TF值及TF-idf结果分别输出。如果你需要类似的诗词语料，可以考虑使用我最近的<a href="https://github.com/Yodeser/PoemsCrawler" target="_blank" rel="noopener">开源工具</a>进行爬取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class TF_IDFUtilsTests &#123;</span><br><span class="line">    private List&lt;String&gt; fileList;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void initialDate() throws IOException &#123;</span><br><span class="line">        String route = Resources.getResource(&quot;text_mining/poems&quot;).getPath(), result = &quot;&quot;;</span><br><span class="line">        List&lt;File&gt; files = FilesUtil.getAllFiles(route, 2);</span><br><span class="line">        fileList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (File file : files) &#123;</span><br><span class="line">            fileList.add(FileUtils.readFileToString(file, &quot;UTF-8&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void countTF_IDF() &#123;</span><br><span class="line">        // HanLP.Config.enableDebug();</span><br><span class="line">        String result = TF_IDFUtils.countIDF(fileList, true);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void countTF() &#123;</span><br><span class="line">        StringBuilder result = new StringBuilder();</span><br><span class="line">        Map&lt;String, Integer&gt; tfMap = TF_IDFUtils.countTFByText(fileList, true);</span><br><span class="line">        List&lt;Map.Entry&lt;String, Integer&gt;&gt; tfArrayList = new ArrayList&lt;&gt;(tfMap.entrySet());</span><br><span class="line">        tfArrayList.sort(Comparator.comparing(Map.Entry::getValue));</span><br><span class="line"></span><br><span class="line">        result.append(&quot;--------------TF Result--------------\n&quot;);</span><br><span class="line">        for (Map.Entry&lt;String, Integer&gt; entry : tfArrayList) &#123;</span><br><span class="line">            result.append(entry.getKey()).append(&quot;\t&quot;).append(entry.getValue()).append(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果展示：<br><img src="https://img.blog.yodes.cn/18-3-30/38661083.jpg" alt="TF Result"><br><img src="https://img.blog.yodes.cn/18-3-30/91875390.jpg" alt="Tf-idf Result"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>诗词作品爬取： <a href="https://github.com/Yodeser/PoemsCrawler" target="_blank" rel="noopener">https://github.com/Yodeser/PoemsCrawler</a> </li><li>分词软件hanLP: <a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">https://github.com/hankcs/HanLP</a></li><li>维基百科_TF-idf：<a href="https://zh.wikipedia.org/wiki/Tf-idf" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Tf-idf</a></li><li>垂直爬虫框架: <a href="https://github.com/code4craft/webmagic" target="_blank" rel="noopener">https://github.com/code4craft/webmagic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/18-3-30/48412646.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;信息时代，大数据成为一切操作的基石，即使是人工智能及深度学习相关领域也离不开数据的支撑。因此文本挖掘、图像处理等基础技术愈加重要，本文将着重介绍文本挖掘中的加权算法——TF-idf及其Java实现。&lt;/p&gt;
    
    </summary>
    
      <category term="文本挖掘" scheme="http://blog.yodes.cn/categories/%E6%96%87%E6%9C%AC%E6%8C%96%E6%8E%98/"/>
    
    
      <category term="文本挖掘" scheme="http://blog.yodes.cn/tags/%E6%96%87%E6%9C%AC%E6%8C%96%E6%8E%98/"/>
    
      <category term="NLP" scheme="http://blog.yodes.cn/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>翻译 | Java8 Stream API 教程</title>
    <link href="http://blog.yodes.cn/post/64df.html"/>
    <id>http://blog.yodes.cn/post/64df.html</id>
    <published>2018-03-08T07:19:05.000Z</published>
    <updated>2018-10-20T08:46:31.002Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/18-3-9/93798267.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt="Java8之Stream"></p><blockquote><p>本文翻译自<a href="http://www.baeldung.com/java-8-streams" target="_blank" rel="noopener">The Java 8 Stream API Tutorial</a></p></blockquote><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>&emsp;&emsp;本教程志在细致入微、深入底层，你将体验从Stream的创建开始（creation）到并行执行（parallel execution）的完整过程，以此体会Stream API的实际用处。</p><p>&emsp;&emsp;为了理解下面的文章，读者需要掌握Java 7基础知识（Lambda表达式、Optional、方法引用）以及熟悉Stream API，如果你并不熟悉它们甚至一无所知，建议你先阅读我们之前的文章-<a href="http://www.baeldung.com/java-8-new-features" target="_blank" rel="noopener">Java8 新特性</a> 以及 <a href="http://www.baeldung.com/java-8-streams-introduction" target="_blank" rel="noopener">Java 8 Streams 介绍</a>。</p><h1 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h1><p>&emsp;&emsp;创建一个Stream实例有多种方式，每种创建方式对应Stream的一个来源。但单个Stream实例每次创建之后，其来源将无法修改，这意味着Stream实例具备源头不可变性，不过我们却可以从单个源创建多个Stream实例。</p><h2 id="Empty-Stream-空Stream"><a href="#Empty-Stream-空Stream" class="headerlink" title="Empty Stream - 空Stream"></a>Empty Stream - 空Stream</h2><p>&emsp;&emsp;方法empty()被用于创建一个Empty Stream：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; streamEmpty  = Stream.empty;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;上述代码段创建的Empty Stream通常被用于避免null对象或零元素对象的streams（streams with no element）返回结果为null：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Stream&lt;String&gt; streamOf(List&lt;String&gt; list)&#123;</span><br><span class="line">  return lsit == null || list.isEmpty() ? Stream.empty() : list.streams();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Stream-of-Collection-集合Steram"><a href="#Stream-of-Collection-集合Steram" class="headerlink" title="Stream of Collection - 集合Steram"></a>Stream of Collection - 集合Steram</h2><p>&emsp;&emsp;我们可以创建任意Collection接口衍生类（Collection-&gt;List、Set、Queue）的Streams：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collections&lt;String&gt; collection = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class="line">Stream&lt;Stirng&gt; streamOfCollection = collection.stream();</span><br></pre></td></tr></table></figure></p><h2 id="Stream-of-Array-数组Stream"><a href="#Stream-of-Array-数组Stream" class="headerlink" title="Stream of Array - 数组Stream"></a>Stream of Array - 数组Stream</h2><p>&emsp;&emsp;接下来的这段代码展示的是数组Stream：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; streamOfArray = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当然我们可以先创建熟悉的数组类型，再以它为源创建Stream，而且我们可以选择Stream中包含的元素数量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = new String[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">Stream&lt;String&gt; streamOfArrayFull = Arrays.stream(arr);</span><br><span class="line">Stream&lt;String&gt; streamOfArrayPart = Arrays.stream(arr, 1, 3);</span><br></pre></td></tr></table></figure></p><h2 id="Stream-builder-构建器"><a href="#Stream-builder-构建器" class="headerlink" title="Stream.builder() - 构建器"></a>Stream.builder() - 构建器</h2><p>&emsp;&emsp;当builder被用于指定参数类型时，应被额外标识在声明右侧，否则方法build()将创建一个Stream(Object)实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; streamBuilder = Stream.&lt;String&gt;builder().add(&quot;a&quot;).add(&quot;b&quot;).add(&quot;c&quot;).build();</span><br></pre></td></tr></table></figure></p><h2 id="Stream-generator-生成器"><a href="#Stream-generator-生成器" class="headerlink" title="Stream.generator() - 生成器"></a>Stream.generator() - 生成器</h2><p>&emsp;&emsp;方法generator()接受一个供应器Supplier<t>用于元素生成。由于生产流(resulting stream)被定义之后属于无限流（即无止境地不断生产），开发者必须指定stream拥有流的目标大小，否则方法generator()将持续生产直到jvm内存到达顶值（memory limit）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; streamOfGenerated = Stream.generate( () -&gt; &quot;element&quot;).limit(10);</span><br></pre></td></tr></table></figure></t></p><p>&emsp;&emsp;上述代码将创建十个内容为“element”的生成流。</p><h2 id="Stream-iterate-迭代器"><a href="#Stream-iterate-迭代器" class="headerlink" title="Stream.iterate() - 迭代器"></a>Stream.iterate() - 迭代器</h2><p>&emsp;&emsp;另一种创建无限流的方法是通过调用方法iterate()，同样的它也需要使用方法limit()对目标流的元素大小进行限制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; streamItreated = Stream.iterate(40, n -&gt; n + 2).limit(20);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;迭代流即采用迭代的方法作为元素生产方式，类似于高中数学中的f(x)，f(f(x))，etc。上述例子中，生成流的第一个元素是迭代器iterate()中的第一个元素40，从第二个元素开始的每个新元素都与上个元素有关，在此例中，生成流中的元素为：40、42、44、…78、80。</p><h2 id="Stream-of-Primitives-基元流"><a href="#Stream-of-Primitives-基元流" class="headerlink" title="Stream of Primitives - 基元流"></a>Stream of Primitives - 基元流</h2><p>&emsp;&emsp;Java8提供了创建三大基础数据类型（int、long、double）stream的方式。由于Stream<t>是一个类接口，我们无法采用泛型传参的方式声明基础数据类型的stream，因此三个特殊的接口就被创造出来了：IntStream、LongStream、DoubleStream。<br>使用它们能够避免不必要的自动装箱<sup>1</sup>以提高生产效率。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = IntStream.range(1, 3);</span><br><span class="line">LongStream longStream = LongStream.rangeClosed(1, 3);</span><br></pre></td></tr></table></figure></t></p><p>&emsp;&emsp;方法range(int startInclusive, int endInclusive)创建了一个有序流（从startInclusive到endInclusive）。它使后面的值每个增加1，但却不包括最后一个参数，即此方法的结果是具备上限的。方法rangeClosed(int startInclusive, int endInclusive)与range()大致相同，但它却包含了最后一个值。<br>这两个方法用于生成三大基本数据类型的stream。</p><p>&emsp;&emsp;此外，Java8之后，类<a href="https://docs.oracle.com/javase/8/docs/api/java/util/Random.html" target="_blank" rel="noopener">Random</a>也提供了拓展方法用于生成基础数据类型的stream。例如，下述代码创建了一个含有三个随机值的DoubleStream：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random random = new Random();</span><br><span class="line">DoubleStream doubleStream = random.doubles(3);</span><br></pre></td></tr></table></figure></p><h2 id="Stream-of-String-字符串流"><a href="#Stream-of-String-字符串流" class="headerlink" title="Stream of String - 字符串流"></a>Stream of String - 字符串流</h2><p>&emsp;&emsp;String类型也可以作为生成stream的源，这得益于方法chars()的帮助，此外由于JDK中没有CharStream接口，IntStream也被用来表示字符流（stream of chars）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream streamOfChars = &quot;abc&quot;.chars();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;下例中通过特征的正则表达式将一个字符串割裂成（break into）其子串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; streamOfString = </span><br><span class="line">  Pattern.compile(&quot;, &quot;).spitAsStream(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br></pre></td></tr></table></figure></p><h2 id="Stream-of-File-文件流"><a href="#Stream-of-File-文件流" class="headerlink" title="Stream of File - 文件流"></a>Stream of File - 文件流</h2><p>&emsp;&emsp;Java NIO<sup>2</sup>类文件允许通过方法lines()生成文本文件的Stream<string>。文本的每一行都会变成stream的一个元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(&quot;C:\\file.txt&quot;);</span><br><span class="line">Stream&lt;String&gt; streamOfString = Files.lines(path);</span><br><span class="line">Stream&lt;String&gt; streamWithCharset = Files.lines(path, Charset.forName(&quot;utf-8&quot;));</span><br></pre></td></tr></table></figure></string></p><p>ps：在方法lines()中也可以通过Charset设置文件编码。</p><h1 id="Referencing-a-Stream-引用stream"><a href="#Referencing-a-Stream-引用stream" class="headerlink" title="Referencing a Stream - 引用stream"></a>Referencing a Stream - 引用stream</h1><p>&emsp;&emsp;只要调用生成操作（中间操作）就会实例化一个stream并生成一个可获取的引用，但执行终端操作会使得stream无法访问。为了证明这一点，我们不妨先忘记它，毕竟实践是检验真理的唯一标准。<br>以下代码如果不考虑冗长的话将是有效的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).filter(element -&gt; element.contains(&quot;b&quot;));</span><br><span class="line">Optional&lt;String&gt; anyElement = stream.findAny();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;但是倘若我们在执行终端操作后重新使用相同的引用，则会不可避免的触发IllegalStateException。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; firstElement = stream.findFirst();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;IllegalStateException是一个运行时异常（RuntimeException），即编译器将不会提示此错误。因此必须记得，<strong>JAVA8 不允许重复使用stream</strong><br>这一设计是合乎逻辑的，因为stream从设计上旨在提供一个将有限操作（指函数体中元素的相关操作）的序列，而不是存储元素。<br>因此想让以前的代码正常工作我们得先改一改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; elements =</span><br><span class="line">  Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;).filter(element -&gt; element.contains(&quot;b&quot;))</span><br><span class="line">    .collect(Collectors.toList());</span><br><span class="line">Optional&lt;String&gt; anyElement = elements.stream().findAny();</span><br><span class="line">Optional&lt;String&gt; firstElement = elements.stream().findFirst();</span><br></pre></td></tr></table></figure></p><h1 id="Stream-Pipeline-流的管道"><a href="#Stream-Pipeline-流的管道" class="headerlink" title="Stream Pipeline - 流的管道"></a>Stream Pipeline - 流的管道</h1><p>&emsp;&emsp;想要执行源数据集的操作集并聚合它们，你需要以下三个部分——源（Source)、中间操作（Intermediate operations）和终结操作（terminal operation）。<br>中间操作返回的是一个新的可操作stream。举个例子，为了在一个包含少量元素Stream的基础之上新建Stream，我们可以调用方法skip()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; oneModifiedStream = Stream.of(&quot;abcd&quot;, &quot;bbcd&quot;, &quot;cbcd&quot;).skip(1);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;如果需要多次修改，则可以采用多次中间操作。假如我们还需要将Stream<string>中每个字符串替换为其子串subString(0, 3)，则可以使用skip()和map()相连的方式完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; twiceModifiedStream = stream.skip(1).map(element -&gt; element.subString(0, 3));</span><br></pre></td></tr></table></figure></string></p><p>&emsp;&emsp;正如你所见，上例中map()使用Lambda表达式作为其参数对stream中的各元素进行处理。<br>stream本身是毫无价值的，编程人员最感兴趣的其实是终结操作（terminal operation），它可以是一个元素也可以是一个行为。只有在终结操作里才能对每个stream进行使用。正确的且最方便的stream操作方式就是Stream Pipeline，即stream源-&gt;中间操作-&gt;终结操作。如例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(&quot;abc1&quot;, &quot;abc2&quot;, &quot;abc3&quot;);</span><br><span class="line">long size = list.stream().skip(1)</span><br><span class="line">  .map(element -&gt; element.substring(0, 3)).sorted().count();</span><br></pre></td></tr></table></figure></p><h1 id="Lazy-Invocation-懒式调用"><a href="#Lazy-Invocation-懒式调用" class="headerlink" title="Lazy Invocation - 懒式调用"></a>Lazy Invocation - 懒式调用</h1><p>&emsp;&emsp;中间操作是懒式调用的，这意味着只有在终结操作需要它们的时候中间操作才会被唤醒。<br>为了证明这个事实，假象我们有个方法wasCalled()，每当它被唤醒时使内部变量counter自增。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private long counter;</span><br><span class="line">private void wasCalled() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;接下来让我们在filter()操作中唤起wasCalled():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(“abc1”, “abc2”, “abc3”);</span><br><span class="line">counter = 0;</span><br><span class="line">Stream&lt;String&gt; stream = list.stream().filter(element -&gt; &#123;</span><br><span class="line">    wasCalled();</span><br><span class="line">    return element.contains(&quot;2&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;由于有三个变量，想象中filter()中的代码块将被执行三次，wasCalled()执行三次之后counter的值应为3，但是执行之后counter并未发生改变，仍然为0，也就是说filter()一次也没有被唤醒，这个原因就是缺失了终结操作（terminal operation）。<br>那接下来我们不妨再上述代码的基础之上添加一次map()操作和一个终结操作——findFirst()，并采用打日志的方式帮助我们了解方法调用时机及顺序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; stream = list.stream().filter( element -&gt; &#123;</span><br><span class="line">    log.info(&quot;filter() was called!&quot;);</span><br><span class="line">    return element.contains(&quot;2&quot;);</span><br><span class="line">  &#125;).map(element -&gt; &#123;</span><br><span class="line">    log.info(&quot;map() was called!&quot;);</span><br><span class="line">    return element.toUpperCase();</span><br><span class="line">  &#125;).findFirst();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;日志结果显示filter()被唤醒了两次，而map()仅仅被调用一次，这是由于管道流是垂直执行的。在此例中第一个元素不满足filter()的要求，因此filter()被调用第二次以查找合适的结果，通过之后即进行map()操作，此时就没有第三次机会执行filter()操作了。findFirst()就能找出源数据集中第一个含有“2”的字符串的全大写字符串了。因此，懒调用使得不必相继调用两个中间操作（filter()和map()）才能完成任务了。</p><h1 id="Order-of-Execution-执行顺序"><a href="#Order-of-Execution-执行顺序" class="headerlink" title="Order of Execution - 执行顺序"></a>Order of Execution - 执行顺序</h1><p>&emsp;&emsp;从性能的角度考虑，正确的执行顺序是采用上文提到的流式管道（Stream Pipeline）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">long size = list.stream().map(element -&gt; &#123;</span><br><span class="line">    wasCalled();</span><br><span class="line">    return element.substring(0, 3);</span><br><span class="line">&#125;).skip(2).count();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;执行这段代码将使counter自增长3次，这意味着stream的方法map()将被调用3次，但最终size的值为1。这意味着结果流（resulting stream）中仅仅只有一个元素，毫无疑问在三次消息处理中程序跳过了两次处理。<br>如果我们改变skip()和map()的执行顺序，counter将只自增长一次。也即是map()只被调用一次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">long size = list.stream().skip(2).map(element -&gt; &#123;</span><br><span class="line">    wasCalled();</span><br><span class="line">    return element.substring(0, 3);</span><br><span class="line">&#125;).count();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;以上示例告诉我们一个规则：用于减少流中元素数量的中间操作，应当放置在处理操作之前。因此，保证在你的Stream Pipeline规则中按照这样的顺序编码：<strong>skip() –&gt; filter() –&gt; distinct()</strong></p><h1 id="Stream-Reduction-流的聚合"><a href="#Stream-Reduction-流的聚合" class="headerlink" title="Stream Reduction - 流的聚合"></a>Stream Reduction - 流的聚合</h1><p>&emsp;&emsp;API提供了大量的终端操作用以聚合一个stream为一种数据类型或变量。比如：count()、max()、min()、sum()，但是这些方法都是预定义的。但如果用户需要自定义一个stream的聚合操作呢？官方提供了两个方法用以实现此类需求：reduce() 和 collect()。</p><h2 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce()方法"></a>reduce()方法</h2><p>&emsp;&emsp;此方法提供了三种变种，不同之处是它们的签名以及返回类型。reduce()方法具有下列参数：<br><em>identify（标识器）</em> - 累积器的初始值或当stream为空时的默认值。<br><em>accumulator（累积器）</em> - 提供设定聚合元素之逻辑的功能，每次规约(reducing)累积器都会创建一个新的值，新值的大小等于stream的大小，并且只有上一个值是可用的。这非常有助于提升性能。<br><em>combiner（组合器）</em> - 提供聚合accumulator（累积器）中元素的功能，combiner是唯一一个能从不同线程以并行模式聚合累积器中结果的方法。<br>好，让我们来实战一下吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OptionalInt reduced =</span><br><span class="line">    IntStream.range(1, 4).reduce((a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure></p><p>reduced = 6 = 1 + 2 + 3。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int reducedTwoParams =</span><br><span class="line">    IntStream.range(1, 4).reduce(10, (a, b) -&gt; a + b);</span><br></pre></td></tr></table></figure></p><p>reducedTwoParams = 16 = 10 + 1 + 2 + 3。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int reducedParams = Stream.of(1, 2, 3)</span><br><span class="line">  .reduce(10, (a, b) -&gt; a + b, (a, b) -&gt; &#123;</span><br><span class="line">     log.info(&quot;combiner was called&quot;);</span><br><span class="line">     return a + b;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这一结果与上文中的16一样，并且不会打出日志，因为combiner没有被唤起。为了唤醒combiner，stream应当是并行的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int reducedParallel = Arrays.asList(1, 2, 3).parallelStream()</span><br><span class="line">    .reduce(10, (a, b) -&gt; a + b, (a, b) -&gt; &#123;</span><br><span class="line">       log.info(&quot;combiner was called&quot;);</span><br><span class="line">       return a + b;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此时，结果变为36，并且combiner被唤起了两次。规约（reduce）运转的算法为：每当stream中的元素通过identify（标识器）时accumulator（累积器）均被调用，最终累积器调用了3次。上述行为是并行完成的，因此造成了（10+1=11; 10+2=12; 10+3=13;）。最终combiner（组合器）混合了三次的结果，通过两次迭代完成运算（12+13=25; 25+11=36;）。</p><h2 id="collect-方法"><a href="#collect-方法" class="headerlink" title="collect()方法"></a>collect()方法</h2><p>&emsp;&emsp;stream的规约也可以被其他的终结方法执行——collect()。它接收了一个名为collector的参数，此参数注明规约的流程。官方已经创建了预定义的收集器，我们可以在这些收集器的帮助下访问它们。<br>下面我们将看到使用List作为所有stream的来源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Product&gt; productList = Arrays.asList(new Product(23, &quot;potatoes&quot;),</span><br><span class="line">  new Product(14, &quot;orange&quot;), new Product(13, &quot;lemon&quot;),</span><br><span class="line">  new Product(23, &quot;bread&quot;), new Product(13, &quot;sugar&quot;));</span><br></pre></td></tr></table></figure></p><p>转换一个stream为Collection集合（Collection、List、Set、Queue、etc）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; collectorCollection = </span><br><span class="line">  productList.stream().map(Product::getName).collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p>规约为String类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String listToString = productList.stream().map(Product::getName)</span><br><span class="line">  .collect(Collectors.joining(&quot;, &quot;, &quot;[&quot;, &quot;]&quot;));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;join()方法拥有三个参数（delimiter, prefix, suffix），使用join()最便捷之处在于程序员不需要考虑stream的起始与结束甚至界定符，Collector会考虑到这些的。<br><strong>计算stream中所有数字元素的平均值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double averagePrice = productList.stream()</span><br><span class="line">  .collect(Collectors.averagingInt(Product::getPrice));</span><br></pre></td></tr></table></figure></p><p><strong>计算stream中所有数字元素的和</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int summingPrice = productList.stream()</span><br><span class="line">    .collect(Collectors.summingInt(Product::getPrice));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;方法averagingXX()、summingXX()和summarizingXX()适用于基础数据类型（int,long,double），也适用于它们的封装类（ Integer,Long,Double）。一个很有效的功能技术提供映射，因此开发者也不是一定需要在collect()方法之后使用map()操作才能完成映射的。<br><strong>收集stream元素集的统计信息</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntSummaryStatistics statistics = productList.stream()</span><br><span class="line">    .collect(Collectors.summarizingInt(Product::getPrice));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过使用IntSummaryStatistics的生成实例，开发者能够通过请求toString()方法创建一个统计报告，结果将是一系列显而易见的结果：IntSummaryStatistics{count=5, sum=86, min=13, average=17,200000, max=23}。通过调用上述方法getCount()、getSum()、getMin()、getAverage()、getMax(),我们也很容易从对象中提取出count、sum、min、average的值，这是因为所有的值均可以从单个管道中获取。</p><p><strong>采用指定方法组合stream中的元素:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Product&gt;&gt; collectorMapOfLists = productList.stream()</span><br><span class="line">  .collect(Collectors.groupingBy(Product::getPrice));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;此例中stream将根据group规则将所有元素规约成一个map。<br><strong>根据一些描述对stream进行分组:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Product&gt; unmodifiableSet = productList.stream()</span><br><span class="line">  .collect(Collectors.collectingAndThen(Collectors.toSet(),</span><br><span class="line">  Collections::unmodifiableSet));</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这种相对特殊的情况里，collection将stream转化为一个Set，之后在此基础上创建了一个不可变的Set。</p><p><strong>Custome collector（自定义收集器）:</strong><br>&emsp;&emsp;假若我们因为一些特定的原因需要创建自定义的收集器，那更简介轻快的方法是采用Collection的of()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Collector&lt;Product, ?, LinkedList&lt;Product&gt;&gt; toLinkedList =</span><br><span class="line">  Collector.of(LinkedList::new, LinkedList::add, </span><br><span class="line">    (first, second) -&gt; &#123; </span><br><span class="line">       first.addAll(second); </span><br><span class="line">       return first; </span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">LinkedList&lt;Product&gt; linkedListOfPersons =</span><br><span class="line">  productList.stream().collect(toLinkedList);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上例中，Collection的实例被规约成了一个LinkedList<person>。</person></p><h1 id="Parallel-Streams-并行流"><a href="#Parallel-Streams-并行流" class="headerlink" title="Parallel Streams - 并行流"></a>Parallel Streams - 并行流</h1><p>&emsp;&emsp;在Java8之前，并行化十分复杂。<a href="http://www.baeldung.com/java-executor-service-tutorial" target="_blank" rel="noopener">ExecutorService</a>和<a href="http://www.baeldung.com/java-fork-join" target="_blank" rel="noopener">FornJoin</a>的出现大大降低了并行开发的复杂度，但它们都无不避免的关注在如何创建一个特征鲜明的executor，以及如何去运行它等等。Java8提倡了一种新的方式用于在函数类型中实现并行化。<br>&emsp;&emsp;API提供并行流用以并行化执行操作。当stream的源是一个数组或者Collection时，在parallelStream()方法的帮助下可以实现并行化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Product&gt; streamOfCollection = productList.parallelStream();</span><br><span class="line">boolean isParallel = streamOfCollection.isParallel();</span><br><span class="line">boolean bigPrice = streamOfCollection</span><br><span class="line">  .map(product -&gt; product.getPrice() * 12)</span><br><span class="line">  .anyMatch(price -&gt; price &gt; 200);</span><br></pre></td></tr></table></figure></p><p>但如果stream的源不是数组或者集合类型时，parallel()方法就应该被使用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStreamParallel = IntStream.range(1, 150).parallel();</span><br><span class="line">boolean isParallel = intStreamParallel.isParallel();</span><br></pre></td></tr></table></figure></p><p>上例中，Stream API自动使用了ForkJoin框架去完成并行操作。默认情况下，公共线程池将被使用，不会（至少暂时不会）给它单独分配线程。当stream处于并行状态时，应当注意可能产生阻塞的操作，当对时间效率有所追求且操作可并行时应当转换为并行stream（理由是假如某个任务大小远远多于其他任务，那它将更加耗时）。当然啦，并行模式也可以转换回串行模式，只要使用sequential()方法就能做到这点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStreamSequential = intStreamParallel.sequential();</span><br><span class="line">boolean isParallel = intStreamSequential.isParallel();</span><br></pre></td></tr></table></figure></p><h1 id="Conclusions-结论"><a href="#Conclusions-结论" class="headerlink" title="Conclusions - 结论"></a>Conclusions - 结论</h1><p>&emsp;&emsp;Stream API在对链式数据进行操作时体现了其强大性，但也易于理解。它通过引用的方法规约大容量的数据，构建了更健壮的程序，最主要的是提升了项目开发的生产力。<br>&emsp;&emsp;在本文中stream均是未被关闭的（我们没有调用close()方法或者其他的终结操作），但在实际项目中，<strong>不要这样无节制的放纵stream的存在，这将逐步耗尽你的内存，造成内存泄漏程序崩溃的风险</strong>。<br>最后，本文所对应的示例代码你可以在<a href="https://github.com/eugenp/tutorials/tree/master/core-java-8" target="_blank" rel="noopener">github-core-java-8</a>上获取到。祝福你身体健康，编码顺利！</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ol><li>自动装箱： 编译器自动为语句进行语法解析，如类型补充等。详见<a href="http://www.cnblogs.com/danne823/archive/2011/04/22/2025332.html" target="_blank" rel="noopener">Java 自动装箱与拆箱(Autoboxing and unboxing)</a></li><li>JAVA NIO： New I/O的简称，与旧式的基于流的I/O方法相对，从名字看，它表示新的一套Java I/O标准。详见<a href="http://www.importnew.com/21341.html" target="_blank" rel="noopener">NIO与AIO</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/18-3-9/93798267.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;Java8之Stream&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://www.baeldung.com/java-8-streams&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Java 8 Stream API Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.yodes.cn/categories/Java/"/>
    
      <category term="Java8 特性" scheme="http://blog.yodes.cn/categories/Java/Java8-%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java基础" scheme="http://blog.yodes.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="文档翻译" scheme="http://blog.yodes.cn/tags/%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="http://blog.yodes.cn/post/1a0f.html"/>
    <id>http://blog.yodes.cn/post/1a0f.html</id>
    <published>2018-03-06T01:19:05.000Z</published>
    <updated>2018-10-20T08:48:17.838Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://yodes.cn" target="_blank" rel="noopener"><img src="https://img.blog.yodes.cn/18-3-9/56309615.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt="点击图片访问我的个人主页"></a><br>&emsp;&emsp;自2014年3月18日发布以来，四年的时间里各大厂商已经逐渐采用Java8重构工程软件，招聘需求里也已将其作为Java开发工程师的必备技能。掌握Java8新特性成了软件开发人员不得不重视的能力。本人结合相关教程及书籍学习了Java8新特性，特此分享。</p><a id="more"></a><h1 id="Lambda表达式（闭包）"><a href="#Lambda表达式（闭包）" class="headerlink" title="Lambda表达式（闭包）"></a>Lambda表达式（闭包）</h1><p>&emsp;&emsp;Lambda（λ，希腊数字中的第十一个数字，由于λ演算式的存在，它也代表闭包）表达式是JAVA 8中最令人激动的新特性，它使得Java编程中出现了函数式编程的概念，在其他高级语言中如Python（解释型、动态数据类型、面向对象），常用Lambda表达式创建匿名函数<sup>1</sup>。Lambda表达式允许我们将函数当成一个参数看待，可以将其传递给一个方法或者直接将表达式所在代码块作为数据处理，这一设计在JAVA 8之前只能采用匿名内部类<sup>2</sup>的方式实现，这损耗了大量的编程时长及读码效率。<br>Example 1    遍历数组<br>Java 7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = new Integer[]&#123;2, 9, -2, 3&#125;;</span><br><span class="line">for(int i : arr)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Java 8<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(2, 9, -2, 3).foreach( (Integer e) -&gt; &#123;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以看到最简单的Lambda表达式可以由数值列表，(变量代表名)，-&gt;以及{行为代码}组成。但实际上，（）包括变量e的类型名都是可以省略的，省略的变量类型名由编译器自行推理，深知{}也是可以省略的，所以最短代码应该是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.adList(2, 9, -2, 3).foreach( e -&gt; System.out.println(e) );</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;Lambda表达式可以引用类成员变量或全局变量，但JVM会自动将其隐形转换成final类型，理由与匿名内部类的参数引用时必须为final一致<sup>3</sup>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String separator = &quot;,&quot;;</span><br><span class="line">Arrays.adList(2, 9, -2, 3).foreach( e -&gt; System.out.print(e) + separator ); // 变量separator将被隐式转换为final类型。</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;为了使Java中原有的功能能够与Lambda表达式结合使用，官方规定函数接口（除下文即将介绍的默认函数及静态函数外，只有一个函数的接口）能够隐式转换成Lambda表达式，java.lang.Runnable和java.concurrent.Callable是函数接口的最佳例子。此外，为了解决函数接口定义与Lambda表达式的冲突，官方提供了一个特殊的注解@FuntionalInterface用以表示函数接口，这意味着你以后定义上述函数接口将采用此注解标识，在Jdk中所有相关的函数也已经加上此注解。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Callable&lt;V&gt; &#123;</span><br><span class="line">    V call() throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="接口新增默认方法和静态方法"><a href="#接口新增默认方法和静态方法" class="headerlink" title="接口新增默认方法和静态方法"></a>接口新增默认方法和静态方法</h1><p>&emsp;&emsp;众所周知，接口相关知识点是面试中老生常谈的话题。在以往接口被定义为抽象方法的集合，接口中的方法会被隐式指定为public abstract，而变量会被隐式指定为public static final，其他修饰符会导致报错。而现在，Java中接口的定义将被修改，接口中除public抽象函数外新增了默认方法和静态方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public interface Defaulable &#123;</span><br><span class="line">    default void hello()&#123;</span><br><span class="line">    System.out.println(&quot;这是接口的默认方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void create()&#123;</span><br><span class="line">    System.out.println(&quot;这是接口的静态方法&quot;);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">public class DefauleImp implements Defaulable&#123;</span><br><span class="line">//    @Override</span><br><span class="line">//    public void hello() &#123;</span><br><span class="line">//        System.out.println(&quot;Hello world&quot;);</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new DefauleImp().hello();</span><br><span class="line">Defaulable.create();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;默认方法可被继承或重写，而静态方法可与类的静态方法一样直接通过<em>接口名.方法名</em>调用。</p><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>&emsp;&emsp;方法引用的最大用途是简写Lambda表达式。</p><table><thead><tr><th style="text-align:center">方法引用</th><th style="text-align:center">Lambda表达式</th></tr></thead><tbody><tr><td style="text-align:center">String::valueOf</td><td style="text-align:center">x -&gt; String.valueOf(x)</td></tr><tr><td style="text-align:center">Object::toString</td><td style="text-align:center">x -&gt; x.toString()</td></tr><tr><td style="text-align:center">x::toString</td><td style="text-align:center">() -&gt; x.toString()</td></tr><tr><td style="text-align:center">ArrayList::new</td><td style="text-align:center">() -&gt; new ArrayList&lt;&gt;()</td></tr></tbody></table><h1 id="拓宽注解的使用范围"><a href="#拓宽注解的使用范围" class="headerlink" title="拓宽注解的使用范围"></a>拓宽注解的使用范围</h1><p>&emsp;&emsp;犹记得在旧版的Java教程中没有注解的出现，当学习Struts等第三方流行框架时出现注解使我极其不适。而现在注解已经成为JAVA世界一种独特且无可替代的定义方式。JAVA8中，注解几乎可以用在任何元素之上：类、接口、元素、方法，甚至是异常。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line"></span><br><span class="line">public class Annotations &#123;</span><br><span class="line">    @Retention( RetentionPolicy.RUNTIME )</span><br><span class="line">    @Target( &#123; ElementType.TYPE_USE, ElementType.TYPE_PARAMETER &#125; )</span><br><span class="line">    public @interface NonEmpty &#123;        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    public static class Holder&lt; @NonEmpty T &gt; extends @NonEmpty Object &#123;</span><br><span class="line">        public void method() throws @NonEmpty Exception &#123;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    @SuppressWarnings( &quot;unused&quot; )</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final Holder&lt; String &gt; holder = new @NonEmpty Holder&lt; String &gt;();       </span><br><span class="line">        @NonEmpty Collection&lt; @NonEmpty String &gt; strings = new ArrayList&lt;&gt;();       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="运行时获取参数名称"><a href="#运行时获取参数名称" class="headerlink" title="运行时获取参数名称"></a>运行时获取参数名称</h1><p>&emsp;&emsp;在Java8以前，需要在运行时得到参数的名称是一件比较困难的事情，程序员们虽然提供了诸如<a href="https://link.jianshu.com/?t=https://github.com/paul-hammant/paranamer" target="_blank" rel="noopener">Paranamer liberary</a>等方法，但用起来总归不算顺畅，而现在Java8从字节码层面（使用新的javac编译器以及-parameters参数）和语言层面（Parameter.getName()和反射API)提供了这一支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    for (Method m : $&#123;ClassName&#125;.class.getMethods()) &#123;</span><br><span class="line">        System.out.println(&quot;----------------------------------------&quot;);</span><br><span class="line">        System.out.println(&quot;   method: &quot; + m.getName());</span><br><span class="line">        System.out.println(&quot;   return: &quot; + m.getReturnType().getName());</span><br><span class="line">        for (Parameter p : m.getParameters()) &#123;</span><br><span class="line">            System.out.println(&quot;parameter: &quot; + p.getType().getName() + &quot;, &quot; + p.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;但是在JAVA8中这个功能是默认关闭的，如果需要打开需要加上参数-parameters进行编译，如果你使用maven作为构建工具，也可以直接在编译插件中加入此参数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;compilerArgument&gt;-parameters&lt;/compilerArgument&gt;</span><br><span class="line">        &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">        &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p><h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h1><p>&emsp;&emsp;Java中经常会出现NullException，为了检验空值异常，程序员经常需要添加许多与业务逻辑无关的检测代码，这既破坏了代码美感，也耗费了宝贵的开发时间，因此Java8中仿照谷歌开源库Guava使用了Optional类，此类提供了有效的接口用于null检查，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt; String &gt; fullName = Optional.ofNullable( &quot;null&quot; );</span><br><span class="line">System.out.println( &quot;Full Name is set? &quot; + fullName.isPresent() );</span><br><span class="line">System.out.println( &quot;Full Name: &quot; + fullName.orElseGet( () -&gt; &quot;[none]&quot; ) );</span><br><span class="line">System.out.println( fullName.map( s -&gt; &quot;Hey &quot; + s + &quot;!&quot; ).orElse( &quot;Hey Stranger!&quot; ) );</span><br></pre></td></tr></table></figure></p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>&emsp;&emsp;Stream也是Java中非常重要的一个特性，在Java文档中这样定义Stream：</p><blockquote><p>A sequence of elements supporting sequential and parallel aggregate operations. </p></blockquote><p>翻译一下，即：</p><ol><li>元素的集合，这也使得Stream类似于Iterator;</li><li>可以顺序或是并行的对原数据进行操作。</li></ol><p>&emsp;&emsp;显而易见，Stream的设计源于分治法，学过并行计算框架MapReduce或Fork/Join的同学更容易理解。</p><blockquote><p>由于Stream所属知识篇幅较大，有兴趣的同学可以关注本人的<a href="http://blog.yodes.cn/2018/03/08/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91Java8%E4%B9%8BStream/"><strong>【翻译】Java8 Stream API 教程</strong></a></p></blockquote><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><ol><li><strong>匿名函数</strong>：指程序中无需定义标识符（即函数名）的函数类型或子程序（代码段）。</li><li><strong>匿名内部类</strong>：无类名的类，它必须且仅能继承一个父类或实现一个接口。</li><li><a href="https://www.zhihu.com/question/21395848" target="_blank" rel="noopener"><strong>为什么匿名内部类参数引用必须为final？</strong></a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://yodes.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.blog.yodes.cn/18-3-9/56309615.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;点击图片访问我的个人主页&quot;&gt;&lt;/a&gt;&lt;br&gt;&amp;emsp;&amp;emsp;自2014年3月18日发布以来，四年的时间里各大厂商已经逐渐采用Java8重构工程软件，招聘需求里也已将其作为Java开发工程师的必备技能。掌握Java8新特性成了软件开发人员不得不重视的能力。本人结合相关教程及书籍学习了Java8新特性，特此分享。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://blog.yodes.cn/categories/Java/"/>
    
      <category term="Java8 特性" scheme="http://blog.yodes.cn/categories/Java/Java8-%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="Java基础" scheme="http://blog.yodes.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="文档翻译" scheme="http://blog.yodes.cn/tags/%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>程序员日记 | 生命不息，战斗不止</title>
    <link href="http://blog.yodes.cn/post/c10e.html"/>
    <id>http://blog.yodes.cn/post/c10e.html</id>
    <published>2017-06-25T09:41:21.000Z</published>
    <updated>2018-10-20T08:59:01.675Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/17-3-7/83831321-file_1488855991233_11670.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><p>&emsp;&emsp;作为一名计算机专业的学生，我的的确确懒惰了，这个学科容不得我半分懈怠，为了自己心中所追逐的梦想，再苦再累我也不会停息。尽全力，纳百家，观方圆，酌得失，一举一动，留待岁月之后的自己独赏。</p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29567100&auto=1&height=66"></iframe><blockquote><h1 id="2017年03月07日-emsp-emsp-丢失了又得到了"><a href="#2017年03月07日-emsp-emsp-丢失了又得到了" class="headerlink" title="2017年03月07日&emsp;&emsp;丢失了又得到了"></a>2017年03月07日&emsp;&emsp;丢失了又得到了</h1></blockquote><p>&emsp;&emsp;选择这首歌的原因是刚刚失恋，这并没有什么大不了的，只是遗憾满满，同时也怕自己不经意间错过了未来的那个人。慢慢的想通，爱究竟是什么，我到底爱她什么，怎么样维持一段爱情。然，即使我现在很仍旧很爱她，也须顺了她的意。不再啰嗦，若有缘，终相见。</p><p>&emsp;&emsp;都说失恋会让人成熟，的却如此，感谢500多天里你让我感受到的幸福以及你心底里珍贵的东西。如果要我选择成熟的方向，我愿意恢复2015年暑假刚刚拥有PC时的勤奋，未来很漫长，我可不能懈怠。网申了很多大公司的暑期实习，其实心里并没有底，专业知识学得不怎么好，项目有不能抬得上台面，唯一庆幸的是自己的学习能力。希望自己能够进入一家好一点的公司实习，也不枉我对父母的承诺。</p><p>&emsp;&emsp;失恋终会忧伤，我也不安慰自己，仿佛失去一半生命的感觉确实不好受，可我还是得立即站起来，为了梦，也为了你。</p><blockquote><h1 id="2017年03月10日-emsp-emsp-给自己打打气"><a href="#2017年03月10日-emsp-emsp-给自己打打气" class="headerlink" title="2017年03月10日&emsp;&emsp;给自己打打气"></a>2017年03月10日&emsp;&emsp;给自己打打气</h1></blockquote><p><img src="https://img.blog.yodes.cn/IMG_20170226_162505_mh1489149638444.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><p>&emsp;&emsp;最近投了很多公司的暑期实习内推，rejected了部分，心里有些失落。今天下午又同高中好友喝了酒，在我心里，这位同学是从高中开始就很厉害的人，与他喝了6瓶酒，瞬间感叹时光易逝，自己已经无法消受10瓶。一个多小时里，谈了许多事，从爱情观谈到就业观，再到家庭观、人生观，虽有些观点不尽相同，可我们那么多年一直坚持求同存异，这些事我们在饭桌上从不遮口的原因。</p><p>&emsp;&emsp;几盅酒过去，谈起了大一时自在而不知名的忙碌，大二我找了女朋友和他饮酒的机会便少了，又叹息再过一年将各奔前途，难再相聚。与他相比，我算是幸运地，我遇见了更多的人，但与他相比我又是悲哀的，我错过了一个特别的人。好友又与我谈起自己的专业知识，自己实习时的奇闻趣事，乐得我饶是开心。说起家人时我们两都感叹，毕业后陪家人的时间将更短，有些不忍，从没想到自己长大也会那么难受。</p><p>&emsp;&emsp;自己如今需要一个实习的机会，了解真正的互联网公司运作模式及开发模式，也迫切需要一份能填在简历上的东西，因此从今天开始得正式地制定一个学习计划，希望自己一直引以为豪的学习能力能为自己赢得一张暑期实习的入场券。Come On!</p><blockquote><h1 id="2017年06月25日-emsp-emsp-四月之痛"><a href="#2017年06月25日-emsp-emsp-四月之痛" class="headerlink" title="2017年06月25日&emsp;&emsp;四月之痛"></a>2017年06月25日&emsp;&emsp;四月之痛</h1></blockquote><p><img src="https://img.blog.yodes.cn/17-6-25/27686676.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><p>&emsp;&emsp;最近感触颇多。已经和最爱的人分手四个月，我向来不是犹豫不决之人，之所以一直不肯放下，是因为我认识到她在我生命之中的重要程度。故不断改正自己、不断剖析自我是我一直在我的事。正如我在知乎上所言，虽然这几年她都不可能跟我在一起了，但我真的希望我能陪她走到生命尽头。</p><p>&emsp;&emsp;这件事给我造成了很大的改变，我逐渐发现了我性格和行为上的缺陷，正在一一评判和解决。但我从没有放弃学习的脚步，我希望自己将情感世界与工作独立开来，我在努力做到。这四个月写了几个爬虫，完成了贴吧信息的爬取和自动登录，不过仍有bug，会持续修复。也找到了几家实习，但我不想离开长沙，因为我试过离开这座城市我有多受不了。当然，也因为我的多多宝宝，所以应该还是不会去杭州的吧。</p><p>&emsp;&emsp;接下来就是实习了，未来啊，等待和冲击是我不变的脚步。我会快步跑到下一个起跑点，在那里等待着我的那只兔。我会变成你最优秀的追求者，即使如今你已有新男友。我会做到不打扰，但我不会离开。我会重新生长重塑自我，但我不会抛弃我的可爱。继续coding，继续奔跑，继续等待。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/17-3-7/83831321-file_1488855991233_11670.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;作为一名计算机专业的学生，我的的确确懒惰了，这个学科容不得我半分懈怠，为了自己心中所追逐的梦想，再苦再累我也不会停息。尽全力，纳百家，观方圆，酌得失，一举一动，留待岁月之后的自己独赏。&lt;/p&gt;
    
    </summary>
    
      <category term="有感" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/"/>
    
      <category term="生活" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="程序员日记" scheme="http://blog.yodes.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>页面置换算法的Java实现</title>
    <link href="http://blog.yodes.cn/post/6596.html"/>
    <id>http://blog.yodes.cn/post/6596.html</id>
    <published>2017-03-11T04:21:17.000Z</published>
    <updated>2018-10-20T12:19:15.033Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/17-3-11/32400581-file_1489206477199_dcc.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><center>你的算法或许比我更好</center><a id="more"></a><p><br><br>不说废话，直接放GuyHub链接：<a href="https://github.com/Yodeser/PageReplacement" target="_blank" rel="noopener">PageReplacement</a></p><h2 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a><a href="https://github.com/Yodeser/PageReplacement/edit/master/src/cn/yodes/OS/Algorithm/FIFO.java" target="_blank" rel="noopener">FIFO</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package cn.yodes.OS.Algorithm;</span><br><span class="line">public class FIFO &#123;</span><br><span class="line"></span><br><span class="line">public void start(int []page , int []block)&#123;</span><br><span class="line">int index_old = 0 , pre = 0 , current = 0;</span><br><span class="line">boolean flag = false;</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; block.length; i++)&#123;</span><br><span class="line">block[i] = -1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line">flag = false;</span><br><span class="line">for(int j : block)&#123;</span><br><span class="line">if(page[i] == j)&#123;</span><br><span class="line">flag = true;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag)&#123;</span><br><span class="line">if(pre &lt; block.length)&#123;</span><br><span class="line">current = pre++;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">current = index_old++ % block.length;</span><br><span class="line">&#125;</span><br><span class="line">block[current] = page[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int k : block)&#123;</span><br><span class="line">System.out.print(k + &quot;\t&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">FIFO test = new FIFO();</span><br><span class="line">int sum_page = 20;</span><br><span class="line">int []page = new int[sum_page];</span><br><span class="line"></span><br><span class="line">int sum_block = 5;</span><br><span class="line">int[] block = new int[sum_block];</span><br><span class="line">for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line">page[i] = (int) (Math.random()*10);</span><br><span class="line">System.out.print(page[i] + &quot;  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">//test.addEle(page, block);</span><br><span class="line">test.start(page, block);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a><a href="https://github.com/Yodeser/PageReplacement/edit/master/src/cn/yodes/OS/Algorithm/LRU.java" target="_blank" rel="noopener">LRU</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package cn.yodes.OS.Algorithm;</span><br><span class="line">public class LRU &#123;</span><br><span class="line"> </span><br><span class="line"> public void start(int[] page , int[] block)&#123;</span><br><span class="line"> int[] temp = new int[block.length];</span><br><span class="line"> int current = 0;</span><br><span class="line"> boolean flag = false;</span><br><span class="line"> for(int i = 0; i &lt; temp.length; i++)&#123;</span><br><span class="line"> temp[i] = i;</span><br><span class="line"> block[i] = -1;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line"> flag = false;</span><br><span class="line"> for(int j = 0; j &lt; block.length; j++)&#123;</span><br><span class="line"> if(page[i] == block[j])&#123; flag = true;  current = j; break;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> if(!flag)&#123;</span><br><span class="line"> for(int j = 0; j &lt; temp.length; j++)&#123;</span><br><span class="line"> if( temp[j] == 0 )&#123;current = j; break;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> block[current] = page[i];</span><br><span class="line"> </span><br><span class="line"> for(int j = 0; j &lt; temp.length; j++)&#123;</span><br><span class="line"> if(temp[j] &gt; temp[current])&#123; temp[j] = (temp[j] - 1) % 4;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> temp[current] = temp.length - 1;</span><br><span class="line"> &#125;</span><br><span class="line"> for(int k : block)</span><br><span class="line"> System.out.print(k + &quot;\t&quot;);</span><br><span class="line"> System.out.println();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">LRU test = new LRU();</span><br><span class="line">int sum_page = 20;</span><br><span class="line">int []page = new int[sum_page];</span><br><span class="line"></span><br><span class="line">int sum_block = 5;</span><br><span class="line">int[] block = new int[sum_block];</span><br><span class="line">for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line">page[i] = (int) (Math.random()*10);</span><br><span class="line">System.out.print(page[i] + &quot;  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">test.start(page, block);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Optimal"><a href="#Optimal" class="headerlink" title="Optimal"></a><a href="https://github.com/Yodeser/PageReplacement/edit/master/src/cn/yodes/OS/Algorithm/Optimal.java" target="_blank" rel="noopener">Optimal</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package cn.yodes.OS.Algorithm;</span><br><span class="line"></span><br><span class="line">public class Optimal &#123;</span><br><span class="line"></span><br><span class="line">public void start(int[] page , int[] block)&#123;</span><br><span class="line">int[] temp = new int[block.length];</span><br><span class="line">int current = 0;</span><br><span class="line">boolean flag = false;</span><br><span class="line">for(int i = 0; i &lt; block.length; i++)&#123;</span><br><span class="line">block[i] = -1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line">flag = false;</span><br><span class="line">for(int j : block)&#123;</span><br><span class="line">if(j == page[i])&#123;flag = true;&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!flag)&#123;</span><br><span class="line">if(current &lt; block.length)&#123;</span><br><span class="line">block[current++] = page[i];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">temp = new int[block.length];</span><br><span class="line">for(int k = 0; k &lt; temp.length; k++)</span><br><span class="line">for(int j = i; j &lt; page.length ; j++)</span><br><span class="line">if(page[j] != block[k])&#123;</span><br><span class="line">temp[k]++;</span><br><span class="line">&#125; else&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">current = getIndexOfMaxVal(temp);</span><br><span class="line">//System.out.print(&quot;m:&quot;);</span><br><span class="line">//for(int m : temp)&#123;</span><br><span class="line">//System.out.print(m + &quot;\t&quot;);</span><br><span class="line">//&#125;</span><br><span class="line">block[current] = page[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//for(int l : block)&#123;</span><br><span class="line">//System.out.print(l + &quot;\t&quot;);</span><br><span class="line">//&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getIndexOfMaxVal(int[] data)&#123;</span><br><span class="line">int maxVal = data[0];</span><br><span class="line">int maxInd = 0;</span><br><span class="line">for(int i = 1; i &lt; data.length; i++)&#123;</span><br><span class="line">if(data[i] &gt; maxVal)&#123;</span><br><span class="line">maxVal = data[i];</span><br><span class="line">maxInd = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//System.out.println(&quot;maxInd=&quot; + maxInd);</span><br><span class="line">return maxInd;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Optimal Test = new Optimal();</span><br><span class="line">int sum_page = 20;</span><br><span class="line">int []page = new int[sum_page];</span><br><span class="line"></span><br><span class="line">int sum_block = 5;</span><br><span class="line">int[] block = new int[sum_block];</span><br><span class="line">for(int i = 0; i &lt; page.length; i++)&#123;</span><br><span class="line">page[i] = (int) (Math.random()*10);</span><br><span class="line">System.out.print(page[i] + &quot;  &quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">Test.start(page, block);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理来源：<a href="http://c.biancheng.net/cpp/html/2614.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/2614.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/17-3-11/32400581-file_1489206477199_dcc.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;你的算法或许比我更好&lt;/center&gt;
    
    </summary>
    
      <category term="操作系统" scheme="http://blog.yodes.cn/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://blog.yodes.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>转载 | Java 的参数调用方式</title>
    <link href="http://blog.yodes.cn/post/8327.html"/>
    <id>http://blog.yodes.cn/post/8327.html</id>
    <published>2017-02-22T11:19:05.000Z</published>
    <updated>2018-10-20T08:52:01.640Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/17-2-22/70047976-file_1487763422605_17890.jpg?imageView2/1/w/600/h/340/interlace/0/q/100" alt=""></p><blockquote><center>对于参数调用问题而言，引用其实还是传值.</center></blockquote><a id="more"></a><p>转自 <img src="http://blog.csdn.NET/fbysss/article/details/3082949" alt="http://blog.csdn.NET/fbysss/article/details/3082949"><br>关键字：Java 传值 传引用<br>这是个老生常谈的问题了，引起过无数争论，但可以说一直没有一个令人满意的回答。<br>有些人非要故弄玄虚，把传引用说成是栈里面放的是引用的值，说只有传值没有传引用，那看看这句经典名言吧：<br><strong>O’Reilly’s Java in a Nutshell by David Flanagan (see Resources) puts it best: “Java manipulates objects ‘by reference,’ but it passes object references to methods ‘by value.’”</strong><br>从这里也可以看到，David 也没那么生硬，不过是看你从哪个角度来认识这个问题，如果大家习惯c++的那种传参时的理解方式，为何不能这么比较呢？<br>有人已经总结过：</p><blockquote><p>参见<br><a href="http://www.javaresearch.org/article/3156.htm" target="_blank" rel="noopener">http://www.javaresearch.org/article/3156.htm</a></p><ul><li>对象是按引用传递的</li><li>Java 应用程序有且仅有的一种参数传递机制，即按值传递</li><li>按值传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的一个副本</li><li>按引用传递意味着当将一个参数传递给一个函数时，函数接收的是原始值的内存地址，而不是值的副本</li></ul></blockquote><p>写的没错，但是文字太多，第二条就已经把人弄糊涂了，得仔细看完4条才清楚。而且对String类型的疑惑没有解决。<br>这么简单的事情，何必这么绕呢？为啥没人跟c++过不去，偏要跟Java来劲？</p><blockquote><p>三句话总结一下：</p><ul><li>对象就是传引用</li><li>原始类型就是传值</li><li>String，Integer, Double等immutable类型因为没有提供自身修改的函数，每次操作都是新生成一个对象，所以要特殊对待。可以认为是传值。</li></ul></blockquote><p>Integer 和 String 一样。保存value的类变量是Final属性，无法被修改，只能被重新赋值／生成新的对象。 当Integer 做为方法参数传递进方法内时，对其的赋值都会导致 原Integer 的引用被 指向了方法内的栈地址，失去了对原类变量地址的指向。对赋值后的Integer对象做得任何操作，都不会影响原来对象。<br>其他参考文章：<br><a href="http://blog.darkmi.com/2010/11/28/1430.html" target="_blank" rel="noopener">http://blog.darkmi.com/2010/11/28/1430.html</a><br><a href="http://dreamhead.blogbus.com/logs/2005/05/1189478.html" target="_blank" rel="noopener">http://dreamhead.blogbus.com/logs/2005/05/1189478.html</a><br><a href="http://www.javaeye.com/topic/12961" target="_blank" rel="noopener">http://www.javaeye.com/topic/12961</a><br><a href="http://www.cnblogs.com/coderising/p/5697986.html" target="_blank" rel="noopener">http://www.cnblogs.com/coderising/p/5697986.html</a><br><a href="http://www.cnblogs.com/laipDIDI/articles/2524309.html" target="_blank" rel="noopener">http://www.cnblogs.com/laipDIDI/articles/2524309.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/17-2-22/70047976-file_1487763422605_17890.jpg?imageView2/1/w/600/h/340/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;center&gt;对于参数调用问题而言，引用其实还是传值.&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="转载" scheme="http://blog.yodes.cn/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="Java基础" scheme="http://blog.yodes.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>活法 | 七月与安生</title>
    <link href="http://blog.yodes.cn/post/fbfe.html"/>
    <id>http://blog.yodes.cn/post/fbfe.html</id>
    <published>2016-10-29T02:35:46.000Z</published>
    <updated>2018-10-20T08:55:19.780Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/29381f30e924b8998c46a38c66061d950a7bf608.jpg?imageView2/1/w/600/h/340/interlace/0/q/100" alt=""></p><blockquote><p>这估计是2016年我看过的最想哭的电影</p></blockquote><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=28656171&auto=0&height=66"></iframe><p>&emsp;&emsp;七月第一次遇见安生的时候，是十三岁的时候，自此就是七年的相守。七月与安生像是两个世界的人，安生父亲早逝、母亲对她不闻不问，因此安生最不安分，是学校里的调皮孩子。而七月则恰恰相反，从小安稳平和的家庭环境使她对未来没有过怀疑。电影开始便会让人纳闷，两个完全不同性格的人为何会成为最亲密的好友呢？当然这个问题在剧末给出了很直接的答案。</p><p>&emsp;&emsp;七月与安生，小时候最爱的事情就是一起洗澡，这也造成剧照被网友误认为这是一部同性恋影片。七月很小的时候就穿上了文胸，而放浪形骸的安生却不愿意遭到束缚，影片的线索很多，这就算一个。安生遇见七月，有了一个新的“家”，而七月碰见安生，朦胧间找到了最真的自己。中考结束之后，七月如愿以偿的进入了重点高中，而安生却带着再也不用交作业的心思到了职校，成为了“小太妹”。因此他们也遇见了不同的男人（ps：全剧的男生仿佛都是渣男），像大多数人的青春期一样，七月喜欢同校的学霸校草苏家明，并把心事告诉了安生，安生这个时候知道自己不是七月唯一爱的人了。安生，一边在压抑一边在让步，因为他单独见了苏家明，却与苏家明互相吸引。当然，七月向家明表白了，这也为后来“真正”的七月正名。</p><p>&emsp;&emsp;跟七月在一起的家明却想着安生，安生仓促的离开呆了数年的城市前往北京去跟随一个流浪吉他手，只为躲避这两个最熟悉的人。在离别的时候，七月看到了安生系着的玉佛，那是家明从不离身的东西，她仿佛明白了一切，不再为七月的离开而伤感。但她没有告诉家明这一切。</p><p>&emsp;&emsp;转眼好多年，七月与家明进入了同一所大学念书，已经准备结婚。而安生四处漂泊，居无定所，换了四五个男朋友，她想回到她和安生的家，却不敢回去，因为那里有家明。安生每隔一段时间就会写信告诉七月自己今天住在哪里做了什么，告诉她自己过得多么多么的潇洒，当然最有都无一不漏的附上：“问候家明”，这成为七月的心病。</p><p>&emsp;&emsp;终于，安生终于受不了颠沛流离的生活，她跟七月说，她想回家。正在此时，家明想抛下七月去北京，他说不想辜负青春，要去拼搏一番。七月没有拦着他，就像当初没有拦着安生一样。就这样，家明去找安生了，安生回来了。久别重逢的闺蜜两人却发现即使没有了家明，他们也不能像以前一样没有嫌隙的生活了。一个受到良好教育衣食无忧的小公主和一个四海为家无依无靠的灰姑凉，她们的生活注定无法无缝融合，七月受不了安生那种凡事耍小聪明的性子，却不知道倘若不如此，安生早已在他乡沦落。她们大吵了一架，安生再次离开，这一次七月也没有阻拦。</p><p>&emsp;&emsp;回到北京的安生在后来遇到了家明，毫无疑问，他们同居了。可女人的第六感使得七月即使在千里之外也能感受到家明的背叛。当七月出现在家明门前的时候，家明正搂着安生。</p><p>&emsp;此刻，仍然是无所畏惧的安生，她仿佛一切都没有发生一样，跟着七月进屋，家明被挡在门外，女人的事男人也不能插手。受伤的七月质问自己多年的闺蜜，尽管她们已经早已不像当年那样亲密无间。影片的高潮部分就在这里，安生与七月相互责备对方，用刺骨的言语告诉对方这些年来对方是如何用“装”来获取同情，从见面的那一瞬间开始，像两个爱哭的孩子一样，她们撕下了对彼此最后一层的伪装。</p><p>&emsp;&emsp;七月警告家明回家与她结婚，否则将永不原谅她。家明终究抛下了七月，可事实上婚礼当天逃走了。因为七月对他说：“你还是离开吧，我不想嫁给不爱我的人”。从全局来看，此时七月应该已经怀孕了，家明离开以后，七月终于可以逃脱家人安排的一切，过上了七月曾经想过的生活，四处流浪，体验一生。</p><p>&emsp;&emsp;自此，七月与安生交换了生命，也是从这里开始七月与安生让人分不清到底谁是谁。在金马奖颁奖典礼上，两个被称为“最毫不做作女星”的女孩说：<strong> “七月与安生，本来就是一个人” </strong> 。故事的结局我已经完全记不清，因为即使是在我刚观影结束的那一刻，都险些分不清活着的是安生还是七月。当然最后，两个女孩从伪装和幻想中解脱出来，七月背弃了早已确定的人生路线，开始学会流浪，肚里带着家明的孩子四处流浪，步履蹒跚走过七月曾经走过的路，自然安生的“死期”也赋予了七月。此时的安生接住了七月的人生接力棒，恋爱、读书、工作，变成了最初的七月。</p><p>&emsp;&emsp;终于，七月难产了，27岁，正是安生自己的“催命符”来临之时，安生带着七月的孩子躲在城市的角落，以七月为笔名写下了往事。直到家明的出现，七月的孩子找到了家明，告诉了安生是“七月”的真相。一切尘埃落地，即使是到最后，安生仍然和七月一样死守着对彼此的承诺。</p><p>&emsp;&emsp;七月与安生的性格逆转堪称本片最难以琢磨之处，两人从最初的心照不宣到撕开伪装，每一幕都是那么的真实，影片中马思纯及周冬雨的表演更是细致入微，使我从中看到了很多不容易看到的真相，感谢作者及导演！接下来打算看纸质书籍。</p><center><!--END--></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/29381f30e924b8998c46a38c66061d950a7bf608.jpg?imageView2/1/w/600/h/340/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这估计是2016年我看过的最想哭的电影&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="有感" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/"/>
    
      <category term="电影" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="电影观后感" scheme="http://blog.yodes.cn/tags/%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>程序员日记 | 抉择</title>
    <link href="http://blog.yodes.cn/post/648e.html"/>
    <id>http://blog.yodes.cn/post/648e.html</id>
    <published>2016-10-24T14:52:47.000Z</published>
    <updated>2018-10-20T08:59:43.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/16-10-24/45339609.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""></p><p>&emsp;&emsp;离开家乡来到这陌生的城市已经两年多了，一年一次回家更是让我自心底将长沙当成了自己的第二个家。我在这里结实了很多有趣的人，偶尔回想起来竟还能挑动我的心神。大学时光，够我品味一生了。</p><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=363221&auto=0&height=66"></iframe><blockquote><h1 id="2016年10月24日-emsp-emsp-学习编程一年的我"><a href="#2016年10月24日-emsp-emsp-学习编程一年的我" class="headerlink" title="2016年10月24日&emsp;&emsp;学习编程一年的我"></a>2016年10月24日&emsp;&emsp;学习编程一年的我</h1></blockquote><p>&emsp;&emsp;第一年，我带着贫穷和自强进入团学会，活跃和热心肠使我轻松游离在形形色色的人群中，那个时候我认识了很多很多的人，拥有很多很多梦想，却对自己的大学很迷茫，因为我累，我没有自由，我失去了自己的道。自我进入计算机专业来时我就笃定了自己的道，我要在大学四年达到很高的计算机水平！无论硬件还是软件。而滞留在组织中束缚了我的思想。不过我不得不感谢，大一一年来，在我没有电脑的时刻我亲密作战的朋友们，虽然已形如路人。</p><p>&emsp;&emsp;去年的暑假，我拥有了两个最令人激情澎湃的梦——爱情和电脑。他们冲击了我的思想，我如饥似渴，吮吸着渴望许久的知识，从前端到后端，从底层到上层，从语言到系统，我无所不用其极地学习。我碰到过很多有趣的语言，虽然没有一个算是精通，但自此我筑下了成为full-stack 开发者的梦。前期的浮躁贪多虽然使我失去了超越众人的机会，却令我更加自豪和淡定。这一年以来，我进步虽算不上神速，但已知足。一年的编程学习自然比不上那些入学前就已接触开发的同学，可我显然会超越的。</p><p>&emsp;&emsp;了解到git之后，我的编程思想有了很大程度的进化。开源和团队，是我此时认为的未来最重要的两样东西。接下来，我该做项目了，百利而无一害。</p><blockquote><h1 id="2016年12月09日-emsp-emsp-深层次的语言特性"><a href="#2016年12月09日-emsp-emsp-深层次的语言特性" class="headerlink" title="2016年12月09日&emsp;&emsp;深层次的语言特性"></a>2016年12月09日&emsp;&emsp;深层次的语言特性</h1></blockquote><p><img src="https://img.blog.yodes.cn/IMG_20161115_110814.jpg?imageView2/1/w/700/h/450/interlace/0/q/100" alt=""><br>&emsp;&emsp;上面的日记以git和做项目为结尾，事实上我也的确独立完成了一个项目，并全程使用git进行代码操作。由于该软件的版权以及隐私性质，我将在该项目的基础上把非核心部分（包括完成的可拓展工具及接口）抽离出来作为一个简单的项目开源。</p><p>&emsp;&emsp;这是我完成的第一个CS模式软件，全程使用JAVA开发，遇到了不少问题，不过常常是熬夜解决了，最多的问题便是国内资源的贫瘠，出于所使用的Tookit以及涉及JVM的知识只有国外才有解决方案，所以不得不依靠google以及我这差的不能再差的英文。另外的问题就是语言特性的问题，第一次开发桌面应用程序，设计到软件工程的许多知识（虽然仍然只是九牛一毛），我不得不从头到尾思考整个软件的基础架构及层间联系，往往需要细微到每一个类与接口。自己虽然最终给出了解决方案，但由于语言特性及算法限制的原因终归存在许多潜在bug和内存分配问题（这在开源版本中会尽可能解决），所以开始阅读《effective Java》，刚看完十几页，书籍讲解的很细致，也拓展了很多Java语言底层的结构，此时我不得不考虑语言特性所带来的知识附加，希望我能通过阅读次数得出一个清晰优美且逻辑严密的软件。</p><p>&emsp;&emsp;一开始选择使用Java语言是由于它的跨平台性，做web开发的程序员总是希望桌面应用软件也能容纳平台差异。事实上也是如此，java具备不错的跨平台能力，但我觉得还不够，即使我现在的软件能实现多平台运行，可我需要付出的代价也是不小的，适应性Jar包和Jre使得真正跨平台的只是Java语言，这兴许最终会有个更好的方案，我相信Java，也相信自己。</p><p>&emsp;&emsp;下一步自然是准备项目的优化重构及开源。。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/16-10-24/45339609.jpg?imageView2/1/w/700/h/450/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;离开家乡来到这陌生的城市已经两年多了，一年一次回家更是让我自心底将长沙当成了自己的第二个家。我在这里结实了很多有趣的人，偶尔回想起来竟还能挑动我的心神。大学时光，够我品味一生了。&lt;/p&gt;
    
    </summary>
    
      <category term="有感" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/"/>
    
      <category term="生活" scheme="http://blog.yodes.cn/categories/%E6%9C%89%E6%84%9F/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="程序员" scheme="http://blog.yodes.cn/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="日记" scheme="http://blog.yodes.cn/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在hexo及MarkDown中添加html、jss等代码段的方法</title>
    <link href="http://blog.yodes.cn/post/dea0.html"/>
    <id>http://blog.yodes.cn/post/dea0.html</id>
    <published>2016-08-12T03:02:46.000Z</published>
    <updated>2018-10-20T08:53:15.388Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.blog.yodes.cn/16-8-21/26528639.jpg?imageView2/1/w/300/h/160/interlace/0/q/100" alt=""></p><blockquote><p>这种方法整理来自<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">hexo官网</a></p></blockquote><a id="more"></a><hr><h1 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><p>###引用块<br>在文章中插入引言，可包含作者、来源和标题。<br><strong>别号：</strong> quote<br><blockquote><p>content</p><footer><strong>[author[</strong><cite>source]] [link] [source_link_title]</cite></footer></blockquote></p><p>#####样例</p><ul><li><strong>没有提供参数，则只输出普通的 blockquote</strong>  <blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote></li></ul><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p><ul><li><strong>引用书上的句子</strong><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote></li></ul><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.<br><strong>David Levithan</strong>Wide Awake</p><ul><li><strong>引用 Twitter</strong><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote></li></ul><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/" target="_blank" rel="noopener">http://devdocs.io</a><br><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></p><ul><li><strong>引用网络上的文章</strong><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote></li></ul><p>Every interaction is both precious and an opportunity to delight.<br><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></p><p>#####代码块<br>在文章中插入代码。<br><strong>别名：</strong> code<br>   <figure class="highlight plain"><figcaption><span>[title] [] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure></p><p>样例<br><strong>普通的代码块</strong><br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure></p><p>alert(‘Hello World!’);</p><p><strong>指定语言</strong><br>     <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure></p><p>[rectangle setX: 10 y: 10 width: 20 height: 20];</p><p><strong>附加说明</strong><br><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure></p><p>Array.map<br>array.map(callback[, thisArg])</p><p><strong>附加说明和网址</strong><br><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure></p><p>_.compact<a href="http://underscorejs.org/#compact" target="_blank" rel="noopener">Underscore.js</a><br>_.compact([0, 1, false, 2, ‘’, 3]);<br>=&gt; [1, 2, 3]</p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#反引号代码块" target="_blank" rel="noopener"></a>反引号代码块<br>另一种形式的代码块，不同的是它使用三个反引号来包裹。<br><code>[language] [title] [url] [link text] code snippet</code><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Pull-Quote" target="_blank" rel="noopener"></a>Pull Quote<br>在文章中插入 Pull quote。<br><blockquote class="pullquote [class]"><p>content</p></blockquote></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#jsFiddle" target="_blank" rel="noopener"></a>jsFiddle<br>在文章中嵌入 jsFiddle。<br><iframe scrolling="no" width="[width]" height="[height]" src="//jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" allowfullscreen></iframe></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Gist" target="_blank" rel="noopener"></a>Gist<br>在文章中嵌入 Gist。<br><script src="//gist.github.com/gist_id.js?file=[filename]"></script></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#iframe" target="_blank" rel="noopener"></a>iframe<br>在文章中插入 iframe。<br><iframe src="url" width="[width]" height="[height]" frameborder="0" allowfullscreen></iframe></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Image" target="_blank" rel="noopener"></a>Image<br>在文章中插入指定大小的图片。<br><img src="/path/to/image" class="[class names]" title="[width] [height] [title text [alt text]]"></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Link" target="_blank" rel="noopener"></a>Link<br>在文章中插入链接，并自动给外部链接添加 target=”_blank”<br> 属性。<br><a>text url [external] [title]</a></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Include-Code" target="_blank" rel="noopener"></a>Include Code<br>插入 source<br> 文件夹内的代码文件。<br></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Youtube" target="_blank" rel="noopener"></a>Youtube<br>在文章中插入 Youtube 视频。<br><div class="video-container"><iframe src="//www.youtube.com/embed/video_id" frameborder="0" allowfullscreen></iframe></div></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Vimeo" target="_blank" rel="noopener"></a>Vimeo<br>在文章中插入 Vimeo 视频。<br><div class="video-container"><iframe src="//player.vimeo.com/video/video_id" frameborder="0" allowfullscreen></iframe></div></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#引用文章" target="_blank" rel="noopener"></a>引用文章<br>引用其他文章的链接。<br><br></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#引用资源" target="_blank" rel="noopener"></a>引用资源<br>引用文章的资源。<br><br><br></p><p><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#Raw" target="_blank" rel="noopener"></a>Raw<br>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br>content</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.blog.yodes.cn/16-8-21/26528639.jpg?imageView2/1/w/300/h/160/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方法整理来自&lt;a href=&quot;https://hexo.io/zh-cn/docs/tag-plugins.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.yodes.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.yodes.cn/tags/hexo/"/>
    
      <category term="markdown" scheme="http://blog.yodes.cn/tags/markdown/"/>
    
  </entry>
  
</feed>
